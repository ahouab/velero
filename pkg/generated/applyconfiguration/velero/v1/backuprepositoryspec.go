/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupRepositorySpecApplyConfiguration represents an declarative configuration of the BackupRepositorySpec type for use
// with apply.
type BackupRepositorySpecApplyConfiguration struct {
	VolumeNamespace       *string      `json:"volumeNamespace,omitempty"`
	BackupStorageLocation *string      `json:"backupStorageLocation,omitempty"`
	RepositoryType        *string      `json:"repositoryType,omitempty"`
	ResticIdentifier      *string      `json:"resticIdentifier,omitempty"`
	MaintenanceFrequency  *v1.Duration `json:"maintenanceFrequency,omitempty"`
}

// BackupRepositorySpecApplyConfiguration constructs an declarative configuration of the BackupRepositorySpec type for use with
// apply.
func BackupRepositorySpec() *BackupRepositorySpecApplyConfiguration {
	return &BackupRepositorySpecApplyConfiguration{}
}

// WithVolumeNamespace sets the VolumeNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeNamespace field is set to the value of the last call.
func (b *BackupRepositorySpecApplyConfiguration) WithVolumeNamespace(value string) *BackupRepositorySpecApplyConfiguration {
	b.VolumeNamespace = &value
	return b
}

// WithBackupStorageLocation sets the BackupStorageLocation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupStorageLocation field is set to the value of the last call.
func (b *BackupRepositorySpecApplyConfiguration) WithBackupStorageLocation(value string) *BackupRepositorySpecApplyConfiguration {
	b.BackupStorageLocation = &value
	return b
}

// WithRepositoryType sets the RepositoryType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RepositoryType field is set to the value of the last call.
func (b *BackupRepositorySpecApplyConfiguration) WithRepositoryType(value string) *BackupRepositorySpecApplyConfiguration {
	b.RepositoryType = &value
	return b
}

// WithResticIdentifier sets the ResticIdentifier field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResticIdentifier field is set to the value of the last call.
func (b *BackupRepositorySpecApplyConfiguration) WithResticIdentifier(value string) *BackupRepositorySpecApplyConfiguration {
	b.ResticIdentifier = &value
	return b
}

// WithMaintenanceFrequency sets the MaintenanceFrequency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaintenanceFrequency field is set to the value of the last call.
func (b *BackupRepositorySpecApplyConfiguration) WithMaintenanceFrequency(value v1.Duration) *BackupRepositorySpecApplyConfiguration {
	b.MaintenanceFrequency = &value
	return b
}
