/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apisvelerov1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RestoreSpecApplyConfiguration represents an declarative configuration of the RestoreSpec type for use
// with apply.
type RestoreSpecApplyConfiguration struct {
	BackupName              *string                                     `json:"backupName,omitempty"`
	ScheduleName            *string                                     `json:"scheduleName,omitempty"`
	IncludedNamespaces      []string                                    `json:"includedNamespaces,omitempty"`
	ExcludedNamespaces      []string                                    `json:"excludedNamespaces,omitempty"`
	IncludedResources       []string                                    `json:"includedResources,omitempty"`
	ExcludedResources       []string                                    `json:"excludedResources,omitempty"`
	NamespaceMapping        map[string]string                           `json:"namespaceMapping,omitempty"`
	LabelSelector           *v1.LabelSelector                           `json:"labelSelector,omitempty"`
	OrLabelSelectors        []*v1.LabelSelector                         `json:"orLabelSelectors,omitempty"`
	RestorePVs              *bool                                       `json:"restorePVs,omitempty"`
	RestoreStatus           *RestoreStatusSpecApplyConfiguration        `json:"restoreStatus,omitempty"`
	PreserveNodePorts       *bool                                       `json:"preserveNodePorts,omitempty"`
	IncludeClusterResources *bool                                       `json:"includeClusterResources,omitempty"`
	Hooks                   *RestoreHooksApplyConfiguration             `json:"hooks,omitempty"`
	ExistingResourcePolicy  *apisvelerov1.PolicyType                    `json:"existingResourcePolicy,omitempty"`
	ItemOperationTimeout    *v1.Duration                                `json:"itemOperationTimeout,omitempty"`
	ResourceModifier        *corev1.TypedLocalObjectReference           `json:"resourceModifier,omitempty"`
	UploaderConfig          *UploaderConfigForRestoreApplyConfiguration `json:"uploaderConfig,omitempty"`
}

// RestoreSpecApplyConfiguration constructs an declarative configuration of the RestoreSpec type for use with
// apply.
func RestoreSpec() *RestoreSpecApplyConfiguration {
	return &RestoreSpecApplyConfiguration{}
}

// WithBackupName sets the BackupName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupName field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithBackupName(value string) *RestoreSpecApplyConfiguration {
	b.BackupName = &value
	return b
}

// WithScheduleName sets the ScheduleName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScheduleName field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithScheduleName(value string) *RestoreSpecApplyConfiguration {
	b.ScheduleName = &value
	return b
}

// WithIncludedNamespaces adds the given value to the IncludedNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedNamespaces field.
func (b *RestoreSpecApplyConfiguration) WithIncludedNamespaces(values ...string) *RestoreSpecApplyConfiguration {
	for i := range values {
		b.IncludedNamespaces = append(b.IncludedNamespaces, values[i])
	}
	return b
}

// WithExcludedNamespaces adds the given value to the ExcludedNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedNamespaces field.
func (b *RestoreSpecApplyConfiguration) WithExcludedNamespaces(values ...string) *RestoreSpecApplyConfiguration {
	for i := range values {
		b.ExcludedNamespaces = append(b.ExcludedNamespaces, values[i])
	}
	return b
}

// WithIncludedResources adds the given value to the IncludedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedResources field.
func (b *RestoreSpecApplyConfiguration) WithIncludedResources(values ...string) *RestoreSpecApplyConfiguration {
	for i := range values {
		b.IncludedResources = append(b.IncludedResources, values[i])
	}
	return b
}

// WithExcludedResources adds the given value to the ExcludedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedResources field.
func (b *RestoreSpecApplyConfiguration) WithExcludedResources(values ...string) *RestoreSpecApplyConfiguration {
	for i := range values {
		b.ExcludedResources = append(b.ExcludedResources, values[i])
	}
	return b
}

// WithNamespaceMapping puts the entries into the NamespaceMapping field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NamespaceMapping field,
// overwriting an existing map entries in NamespaceMapping field with the same key.
func (b *RestoreSpecApplyConfiguration) WithNamespaceMapping(entries map[string]string) *RestoreSpecApplyConfiguration {
	if b.NamespaceMapping == nil && len(entries) > 0 {
		b.NamespaceMapping = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NamespaceMapping[k] = v
	}
	return b
}

// WithLabelSelector sets the LabelSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelSelector field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithLabelSelector(value v1.LabelSelector) *RestoreSpecApplyConfiguration {
	b.LabelSelector = &value
	return b
}

// WithOrLabelSelectors adds the given value to the OrLabelSelectors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OrLabelSelectors field.
func (b *RestoreSpecApplyConfiguration) WithOrLabelSelectors(values ...*v1.LabelSelector) *RestoreSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOrLabelSelectors")
		}
		b.OrLabelSelectors = append(b.OrLabelSelectors, *values[i])
	}
	return b
}

// WithRestorePVs sets the RestorePVs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestorePVs field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithRestorePVs(value bool) *RestoreSpecApplyConfiguration {
	b.RestorePVs = &value
	return b
}

// WithRestoreStatus sets the RestoreStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestoreStatus field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithRestoreStatus(value *RestoreStatusSpecApplyConfiguration) *RestoreSpecApplyConfiguration {
	b.RestoreStatus = value
	return b
}

// WithPreserveNodePorts sets the PreserveNodePorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PreserveNodePorts field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithPreserveNodePorts(value bool) *RestoreSpecApplyConfiguration {
	b.PreserveNodePorts = &value
	return b
}

// WithIncludeClusterResources sets the IncludeClusterResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IncludeClusterResources field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithIncludeClusterResources(value bool) *RestoreSpecApplyConfiguration {
	b.IncludeClusterResources = &value
	return b
}

// WithHooks sets the Hooks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hooks field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithHooks(value *RestoreHooksApplyConfiguration) *RestoreSpecApplyConfiguration {
	b.Hooks = value
	return b
}

// WithExistingResourcePolicy sets the ExistingResourcePolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExistingResourcePolicy field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithExistingResourcePolicy(value apisvelerov1.PolicyType) *RestoreSpecApplyConfiguration {
	b.ExistingResourcePolicy = &value
	return b
}

// WithItemOperationTimeout sets the ItemOperationTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ItemOperationTimeout field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithItemOperationTimeout(value v1.Duration) *RestoreSpecApplyConfiguration {
	b.ItemOperationTimeout = &value
	return b
}

// WithResourceModifier sets the ResourceModifier field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceModifier field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithResourceModifier(value corev1.TypedLocalObjectReference) *RestoreSpecApplyConfiguration {
	b.ResourceModifier = &value
	return b
}

// WithUploaderConfig sets the UploaderConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UploaderConfig field is set to the value of the last call.
func (b *RestoreSpecApplyConfiguration) WithUploaderConfig(value *UploaderConfigForRestoreApplyConfiguration) *RestoreSpecApplyConfiguration {
	b.UploaderConfig = value
	return b
}
