/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	velerov1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupStatusApplyConfiguration represents an declarative configuration of the BackupStatus type for use
// with apply.
type BackupStatusApplyConfiguration struct {
	Version                       *int                              `json:"version,omitempty"`
	FormatVersion                 *string                           `json:"formatVersion,omitempty"`
	Expiration                    *v1.Time                          `json:"expiration,omitempty"`
	Phase                         *velerov1.BackupPhase             `json:"phase,omitempty"`
	ValidationErrors              []string                          `json:"validationErrors,omitempty"`
	StartTimestamp                *v1.Time                          `json:"startTimestamp,omitempty"`
	CompletionTimestamp           *v1.Time                          `json:"completionTimestamp,omitempty"`
	VolumeSnapshotsAttempted      *int                              `json:"volumeSnapshotsAttempted,omitempty"`
	VolumeSnapshotsCompleted      *int                              `json:"volumeSnapshotsCompleted,omitempty"`
	FailureReason                 *string                           `json:"failureReason,omitempty"`
	Warnings                      *int                              `json:"warnings,omitempty"`
	Errors                        *int                              `json:"errors,omitempty"`
	Progress                      *BackupProgressApplyConfiguration `json:"progress,omitempty"`
	CSIVolumeSnapshotsAttempted   *int                              `json:"csiVolumeSnapshotsAttempted,omitempty"`
	CSIVolumeSnapshotsCompleted   *int                              `json:"csiVolumeSnapshotsCompleted,omitempty"`
	BackupItemOperationsAttempted *int                              `json:"backupItemOperationsAttempted,omitempty"`
	BackupItemOperationsCompleted *int                              `json:"backupItemOperationsCompleted,omitempty"`
	BackupItemOperationsFailed    *int                              `json:"backupItemOperationsFailed,omitempty"`
	HookStatus                    *HookStatusApplyConfiguration     `json:"hookStatus,omitempty"`
}

// BackupStatusApplyConfiguration constructs an declarative configuration of the BackupStatus type for use with
// apply.
func BackupStatus() *BackupStatusApplyConfiguration {
	return &BackupStatusApplyConfiguration{}
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithVersion(value int) *BackupStatusApplyConfiguration {
	b.Version = &value
	return b
}

// WithFormatVersion sets the FormatVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FormatVersion field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithFormatVersion(value string) *BackupStatusApplyConfiguration {
	b.FormatVersion = &value
	return b
}

// WithExpiration sets the Expiration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Expiration field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithExpiration(value v1.Time) *BackupStatusApplyConfiguration {
	b.Expiration = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithPhase(value velerov1.BackupPhase) *BackupStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithValidationErrors adds the given value to the ValidationErrors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ValidationErrors field.
func (b *BackupStatusApplyConfiguration) WithValidationErrors(values ...string) *BackupStatusApplyConfiguration {
	for i := range values {
		b.ValidationErrors = append(b.ValidationErrors, values[i])
	}
	return b
}

// WithStartTimestamp sets the StartTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTimestamp field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithStartTimestamp(value v1.Time) *BackupStatusApplyConfiguration {
	b.StartTimestamp = &value
	return b
}

// WithCompletionTimestamp sets the CompletionTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CompletionTimestamp field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithCompletionTimestamp(value v1.Time) *BackupStatusApplyConfiguration {
	b.CompletionTimestamp = &value
	return b
}

// WithVolumeSnapshotsAttempted sets the VolumeSnapshotsAttempted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeSnapshotsAttempted field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithVolumeSnapshotsAttempted(value int) *BackupStatusApplyConfiguration {
	b.VolumeSnapshotsAttempted = &value
	return b
}

// WithVolumeSnapshotsCompleted sets the VolumeSnapshotsCompleted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeSnapshotsCompleted field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithVolumeSnapshotsCompleted(value int) *BackupStatusApplyConfiguration {
	b.VolumeSnapshotsCompleted = &value
	return b
}

// WithFailureReason sets the FailureReason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailureReason field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithFailureReason(value string) *BackupStatusApplyConfiguration {
	b.FailureReason = &value
	return b
}

// WithWarnings sets the Warnings field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Warnings field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithWarnings(value int) *BackupStatusApplyConfiguration {
	b.Warnings = &value
	return b
}

// WithErrors sets the Errors field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Errors field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithErrors(value int) *BackupStatusApplyConfiguration {
	b.Errors = &value
	return b
}

// WithProgress sets the Progress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Progress field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithProgress(value *BackupProgressApplyConfiguration) *BackupStatusApplyConfiguration {
	b.Progress = value
	return b
}

// WithCSIVolumeSnapshotsAttempted sets the CSIVolumeSnapshotsAttempted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSIVolumeSnapshotsAttempted field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithCSIVolumeSnapshotsAttempted(value int) *BackupStatusApplyConfiguration {
	b.CSIVolumeSnapshotsAttempted = &value
	return b
}

// WithCSIVolumeSnapshotsCompleted sets the CSIVolumeSnapshotsCompleted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSIVolumeSnapshotsCompleted field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithCSIVolumeSnapshotsCompleted(value int) *BackupStatusApplyConfiguration {
	b.CSIVolumeSnapshotsCompleted = &value
	return b
}

// WithBackupItemOperationsAttempted sets the BackupItemOperationsAttempted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupItemOperationsAttempted field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithBackupItemOperationsAttempted(value int) *BackupStatusApplyConfiguration {
	b.BackupItemOperationsAttempted = &value
	return b
}

// WithBackupItemOperationsCompleted sets the BackupItemOperationsCompleted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupItemOperationsCompleted field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithBackupItemOperationsCompleted(value int) *BackupStatusApplyConfiguration {
	b.BackupItemOperationsCompleted = &value
	return b
}

// WithBackupItemOperationsFailed sets the BackupItemOperationsFailed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupItemOperationsFailed field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithBackupItemOperationsFailed(value int) *BackupStatusApplyConfiguration {
	b.BackupItemOperationsFailed = &value
	return b
}

// WithHookStatus sets the HookStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HookStatus field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithHookStatus(value *HookStatusApplyConfiguration) *BackupStatusApplyConfiguration {
	b.HookStatus = value
	return b
}
