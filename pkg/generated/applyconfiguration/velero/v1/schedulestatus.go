/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ScheduleStatusApplyConfiguration represents an declarative configuration of the ScheduleStatus type for use
// with apply.
type ScheduleStatusApplyConfiguration struct {
	Phase            *v1.SchedulePhase `json:"phase,omitempty"`
	LastBackup       *metav1.Time      `json:"lastBackup,omitempty"`
	LastSkipped      *metav1.Time      `json:"lastSkipped,omitempty"`
	ValidationErrors []string          `json:"validationErrors,omitempty"`
}

// ScheduleStatusApplyConfiguration constructs an declarative configuration of the ScheduleStatus type for use with
// apply.
func ScheduleStatus() *ScheduleStatusApplyConfiguration {
	return &ScheduleStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ScheduleStatusApplyConfiguration) WithPhase(value v1.SchedulePhase) *ScheduleStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithLastBackup sets the LastBackup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastBackup field is set to the value of the last call.
func (b *ScheduleStatusApplyConfiguration) WithLastBackup(value metav1.Time) *ScheduleStatusApplyConfiguration {
	b.LastBackup = &value
	return b
}

// WithLastSkipped sets the LastSkipped field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSkipped field is set to the value of the last call.
func (b *ScheduleStatusApplyConfiguration) WithLastSkipped(value metav1.Time) *ScheduleStatusApplyConfiguration {
	b.LastSkipped = &value
	return b
}

// WithValidationErrors adds the given value to the ValidationErrors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ValidationErrors field.
func (b *ScheduleStatusApplyConfiguration) WithValidationErrors(values ...string) *ScheduleStatusApplyConfiguration {
	for i := range values {
		b.ValidationErrors = append(b.ValidationErrors, values[i])
	}
	return b
}
