/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ScheduleSpecApplyConfiguration represents an declarative configuration of the ScheduleSpec type for use
// with apply.
type ScheduleSpecApplyConfiguration struct {
	Template                   *BackupSpecApplyConfiguration `json:"template,omitempty"`
	Schedule                   *string                       `json:"schedule,omitempty"`
	UseOwnerReferencesInBackup *bool                         `json:"useOwnerReferencesInBackup,omitempty"`
	Paused                     *bool                         `json:"paused,omitempty"`
	SkipImmediately            *bool                         `json:"skipImmediately,omitempty"`
}

// ScheduleSpecApplyConfiguration constructs an declarative configuration of the ScheduleSpec type for use with
// apply.
func ScheduleSpec() *ScheduleSpecApplyConfiguration {
	return &ScheduleSpecApplyConfiguration{}
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ScheduleSpecApplyConfiguration) WithTemplate(value *BackupSpecApplyConfiguration) *ScheduleSpecApplyConfiguration {
	b.Template = value
	return b
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schedule field is set to the value of the last call.
func (b *ScheduleSpecApplyConfiguration) WithSchedule(value string) *ScheduleSpecApplyConfiguration {
	b.Schedule = &value
	return b
}

// WithUseOwnerReferencesInBackup sets the UseOwnerReferencesInBackup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UseOwnerReferencesInBackup field is set to the value of the last call.
func (b *ScheduleSpecApplyConfiguration) WithUseOwnerReferencesInBackup(value bool) *ScheduleSpecApplyConfiguration {
	b.UseOwnerReferencesInBackup = &value
	return b
}

// WithPaused sets the Paused field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Paused field is set to the value of the last call.
func (b *ScheduleSpecApplyConfiguration) WithPaused(value bool) *ScheduleSpecApplyConfiguration {
	b.Paused = &value
	return b
}

// WithSkipImmediately sets the SkipImmediately field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SkipImmediately field is set to the value of the last call.
func (b *ScheduleSpecApplyConfiguration) WithSkipImmediately(value bool) *ScheduleSpecApplyConfiguration {
	b.SkipImmediately = &value
	return b
}
