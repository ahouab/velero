/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apisvelerov1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupStorageLocationSpecApplyConfiguration represents an declarative configuration of the BackupStorageLocationSpec type for use
// with apply.
type BackupStorageLocationSpecApplyConfiguration struct {
	Provider                      *string               `json:"provider,omitempty"`
	Config                        map[string]string     `json:"config,omitempty"`
	Credential                    *v1.SecretKeySelector `json:"credential,omitempty"`
	StorageTypeApplyConfiguration `json:",inline"`
	Default                       *bool                                         `json:"default,omitempty"`
	AccessMode                    *apisvelerov1.BackupStorageLocationAccessMode `json:"accessMode,omitempty"`
	BackupSyncPeriod              *metav1.Duration                              `json:"backupSyncPeriod,omitempty"`
	ValidationFrequency           *metav1.Duration                              `json:"validationFrequency,omitempty"`
}

// BackupStorageLocationSpecApplyConfiguration constructs an declarative configuration of the BackupStorageLocationSpec type for use with
// apply.
func BackupStorageLocationSpec() *BackupStorageLocationSpecApplyConfiguration {
	return &BackupStorageLocationSpecApplyConfiguration{}
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *BackupStorageLocationSpecApplyConfiguration) WithProvider(value string) *BackupStorageLocationSpecApplyConfiguration {
	b.Provider = &value
	return b
}

// WithConfig puts the entries into the Config field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Config field,
// overwriting an existing map entries in Config field with the same key.
func (b *BackupStorageLocationSpecApplyConfiguration) WithConfig(entries map[string]string) *BackupStorageLocationSpecApplyConfiguration {
	if b.Config == nil && len(entries) > 0 {
		b.Config = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Config[k] = v
	}
	return b
}

// WithCredential sets the Credential field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Credential field is set to the value of the last call.
func (b *BackupStorageLocationSpecApplyConfiguration) WithCredential(value v1.SecretKeySelector) *BackupStorageLocationSpecApplyConfiguration {
	b.Credential = &value
	return b
}

// WithObjectStorage sets the ObjectStorage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObjectStorage field is set to the value of the last call.
func (b *BackupStorageLocationSpecApplyConfiguration) WithObjectStorage(value *ObjectStorageLocationApplyConfiguration) *BackupStorageLocationSpecApplyConfiguration {
	b.ObjectStorage = value
	return b
}

// WithDefault sets the Default field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Default field is set to the value of the last call.
func (b *BackupStorageLocationSpecApplyConfiguration) WithDefault(value bool) *BackupStorageLocationSpecApplyConfiguration {
	b.Default = &value
	return b
}

// WithAccessMode sets the AccessMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AccessMode field is set to the value of the last call.
func (b *BackupStorageLocationSpecApplyConfiguration) WithAccessMode(value apisvelerov1.BackupStorageLocationAccessMode) *BackupStorageLocationSpecApplyConfiguration {
	b.AccessMode = &value
	return b
}

// WithBackupSyncPeriod sets the BackupSyncPeriod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupSyncPeriod field is set to the value of the last call.
func (b *BackupStorageLocationSpecApplyConfiguration) WithBackupSyncPeriod(value metav1.Duration) *BackupStorageLocationSpecApplyConfiguration {
	b.BackupSyncPeriod = &value
	return b
}

// WithValidationFrequency sets the ValidationFrequency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ValidationFrequency field is set to the value of the last call.
func (b *BackupStorageLocationSpecApplyConfiguration) WithValidationFrequency(value metav1.Duration) *BackupStorageLocationSpecApplyConfiguration {
	b.ValidationFrequency = &value
	return b
}
