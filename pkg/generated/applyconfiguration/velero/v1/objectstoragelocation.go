/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ObjectStorageLocationApplyConfiguration represents an declarative configuration of the ObjectStorageLocation type for use
// with apply.
type ObjectStorageLocationApplyConfiguration struct {
	Bucket *string `json:"bucket,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	CACert []byte  `json:"caCert,omitempty"`
}

// ObjectStorageLocationApplyConfiguration constructs an declarative configuration of the ObjectStorageLocation type for use with
// apply.
func ObjectStorageLocation() *ObjectStorageLocationApplyConfiguration {
	return &ObjectStorageLocationApplyConfiguration{}
}

// WithBucket sets the Bucket field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Bucket field is set to the value of the last call.
func (b *ObjectStorageLocationApplyConfiguration) WithBucket(value string) *ObjectStorageLocationApplyConfiguration {
	b.Bucket = &value
	return b
}

// WithPrefix sets the Prefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Prefix field is set to the value of the last call.
func (b *ObjectStorageLocationApplyConfiguration) WithPrefix(value string) *ObjectStorageLocationApplyConfiguration {
	b.Prefix = &value
	return b
}

// WithCACert adds the given value to the CACert field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CACert field.
func (b *ObjectStorageLocationApplyConfiguration) WithCACert(values ...byte) *ObjectStorageLocationApplyConfiguration {
	for i := range values {
		b.CACert = append(b.CACert, values[i])
	}
	return b
}
