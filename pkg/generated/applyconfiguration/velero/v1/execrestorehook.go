/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ExecRestoreHookApplyConfiguration represents an declarative configuration of the ExecRestoreHook type for use
// with apply.
type ExecRestoreHookApplyConfiguration struct {
	Container    *string           `json:"container,omitempty"`
	Command      []string          `json:"command,omitempty"`
	OnError      *v1.HookErrorMode `json:"onError,omitempty"`
	ExecTimeout  *metav1.Duration  `json:"execTimeout,omitempty"`
	WaitTimeout  *metav1.Duration  `json:"waitTimeout,omitempty"`
	WaitForReady *bool             `json:"waitForReady,omitempty"`
}

// ExecRestoreHookApplyConfiguration constructs an declarative configuration of the ExecRestoreHook type for use with
// apply.
func ExecRestoreHook() *ExecRestoreHookApplyConfiguration {
	return &ExecRestoreHookApplyConfiguration{}
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *ExecRestoreHookApplyConfiguration) WithContainer(value string) *ExecRestoreHookApplyConfiguration {
	b.Container = &value
	return b
}

// WithCommand adds the given value to the Command field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Command field.
func (b *ExecRestoreHookApplyConfiguration) WithCommand(values ...string) *ExecRestoreHookApplyConfiguration {
	for i := range values {
		b.Command = append(b.Command, values[i])
	}
	return b
}

// WithOnError sets the OnError field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OnError field is set to the value of the last call.
func (b *ExecRestoreHookApplyConfiguration) WithOnError(value v1.HookErrorMode) *ExecRestoreHookApplyConfiguration {
	b.OnError = &value
	return b
}

// WithExecTimeout sets the ExecTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExecTimeout field is set to the value of the last call.
func (b *ExecRestoreHookApplyConfiguration) WithExecTimeout(value metav1.Duration) *ExecRestoreHookApplyConfiguration {
	b.ExecTimeout = &value
	return b
}

// WithWaitTimeout sets the WaitTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WaitTimeout field is set to the value of the last call.
func (b *ExecRestoreHookApplyConfiguration) WithWaitTimeout(value metav1.Duration) *ExecRestoreHookApplyConfiguration {
	b.WaitTimeout = &value
	return b
}

// WithWaitForReady sets the WaitForReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WaitForReady field is set to the value of the last call.
func (b *ExecRestoreHookApplyConfiguration) WithWaitForReady(value bool) *ExecRestoreHookApplyConfiguration {
	b.WaitForReady = &value
	return b
}
