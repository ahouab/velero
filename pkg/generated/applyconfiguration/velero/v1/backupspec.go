/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupSpecApplyConfiguration represents an declarative configuration of the BackupSpec type for use
// with apply.
type BackupSpecApplyConfiguration struct {
	*MetadataApplyConfiguration      `json:"metadata,omitempty"`
	IncludedNamespaces               []string                                   `json:"includedNamespaces,omitempty"`
	ExcludedNamespaces               []string                                   `json:"excludedNamespaces,omitempty"`
	IncludedResources                []string                                   `json:"includedResources,omitempty"`
	ExcludedResources                []string                                   `json:"excludedResources,omitempty"`
	IncludedClusterScopedResources   []string                                   `json:"includedClusterScopedResources,omitempty"`
	ExcludedClusterScopedResources   []string                                   `json:"excludedClusterScopedResources,omitempty"`
	IncludedNamespaceScopedResources []string                                   `json:"includedNamespaceScopedResources,omitempty"`
	ExcludedNamespaceScopedResources []string                                   `json:"excludedNamespaceScopedResources,omitempty"`
	LabelSelector                    *metav1.LabelSelector                      `json:"labelSelector,omitempty"`
	OrLabelSelectors                 []*metav1.LabelSelector                    `json:"orLabelSelectors,omitempty"`
	SnapshotVolumes                  *bool                                      `json:"snapshotVolumes,omitempty"`
	TTL                              *metav1.Duration                           `json:"ttl,omitempty"`
	IncludeClusterResources          *bool                                      `json:"includeClusterResources,omitempty"`
	Hooks                            *BackupHooksApplyConfiguration             `json:"hooks,omitempty"`
	StorageLocation                  *string                                    `json:"storageLocation,omitempty"`
	VolumeSnapshotLocations          []string                                   `json:"volumeSnapshotLocations,omitempty"`
	DefaultVolumesToRestic           *bool                                      `json:"defaultVolumesToRestic,omitempty"`
	DefaultVolumesToFsBackup         *bool                                      `json:"defaultVolumesToFsBackup,omitempty"`
	OrderedResources                 map[string]string                          `json:"orderedResources,omitempty"`
	CSISnapshotTimeout               *metav1.Duration                           `json:"csiSnapshotTimeout,omitempty"`
	ItemOperationTimeout             *metav1.Duration                           `json:"itemOperationTimeout,omitempty"`
	ResourcePolicy                   *corev1.TypedLocalObjectReference          `json:"resourcePolicy,omitempty"`
	SnapshotMoveData                 *bool                                      `json:"snapshotMoveData,omitempty"`
	DataMover                        *string                                    `json:"datamover,omitempty"`
	UploaderConfig                   *UploaderConfigForBackupApplyConfiguration `json:"uploaderConfig,omitempty"`
}

// BackupSpecApplyConfiguration constructs an declarative configuration of the BackupSpec type for use with
// apply.
func BackupSpec() *BackupSpecApplyConfiguration {
	return &BackupSpecApplyConfiguration{}
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *BackupSpecApplyConfiguration) WithLabels(entries map[string]string) *BackupSpecApplyConfiguration {
	b.ensureMetadataApplyConfigurationExists()
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

func (b *BackupSpecApplyConfiguration) ensureMetadataApplyConfigurationExists() {
	if b.MetadataApplyConfiguration == nil {
		b.MetadataApplyConfiguration = &MetadataApplyConfiguration{}
	}
}

// WithIncludedNamespaces adds the given value to the IncludedNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedNamespaces field.
func (b *BackupSpecApplyConfiguration) WithIncludedNamespaces(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.IncludedNamespaces = append(b.IncludedNamespaces, values[i])
	}
	return b
}

// WithExcludedNamespaces adds the given value to the ExcludedNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedNamespaces field.
func (b *BackupSpecApplyConfiguration) WithExcludedNamespaces(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.ExcludedNamespaces = append(b.ExcludedNamespaces, values[i])
	}
	return b
}

// WithIncludedResources adds the given value to the IncludedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedResources field.
func (b *BackupSpecApplyConfiguration) WithIncludedResources(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.IncludedResources = append(b.IncludedResources, values[i])
	}
	return b
}

// WithExcludedResources adds the given value to the ExcludedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedResources field.
func (b *BackupSpecApplyConfiguration) WithExcludedResources(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.ExcludedResources = append(b.ExcludedResources, values[i])
	}
	return b
}

// WithIncludedClusterScopedResources adds the given value to the IncludedClusterScopedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedClusterScopedResources field.
func (b *BackupSpecApplyConfiguration) WithIncludedClusterScopedResources(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.IncludedClusterScopedResources = append(b.IncludedClusterScopedResources, values[i])
	}
	return b
}

// WithExcludedClusterScopedResources adds the given value to the ExcludedClusterScopedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedClusterScopedResources field.
func (b *BackupSpecApplyConfiguration) WithExcludedClusterScopedResources(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.ExcludedClusterScopedResources = append(b.ExcludedClusterScopedResources, values[i])
	}
	return b
}

// WithIncludedNamespaceScopedResources adds the given value to the IncludedNamespaceScopedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedNamespaceScopedResources field.
func (b *BackupSpecApplyConfiguration) WithIncludedNamespaceScopedResources(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.IncludedNamespaceScopedResources = append(b.IncludedNamespaceScopedResources, values[i])
	}
	return b
}

// WithExcludedNamespaceScopedResources adds the given value to the ExcludedNamespaceScopedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedNamespaceScopedResources field.
func (b *BackupSpecApplyConfiguration) WithExcludedNamespaceScopedResources(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.ExcludedNamespaceScopedResources = append(b.ExcludedNamespaceScopedResources, values[i])
	}
	return b
}

// WithLabelSelector sets the LabelSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelSelector field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithLabelSelector(value metav1.LabelSelector) *BackupSpecApplyConfiguration {
	b.LabelSelector = &value
	return b
}

// WithOrLabelSelectors adds the given value to the OrLabelSelectors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OrLabelSelectors field.
func (b *BackupSpecApplyConfiguration) WithOrLabelSelectors(values ...*metav1.LabelSelector) *BackupSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOrLabelSelectors")
		}
		b.OrLabelSelectors = append(b.OrLabelSelectors, *values[i])
	}
	return b
}

// WithSnapshotVolumes sets the SnapshotVolumes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotVolumes field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithSnapshotVolumes(value bool) *BackupSpecApplyConfiguration {
	b.SnapshotVolumes = &value
	return b
}

// WithTTL sets the TTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TTL field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithTTL(value metav1.Duration) *BackupSpecApplyConfiguration {
	b.TTL = &value
	return b
}

// WithIncludeClusterResources sets the IncludeClusterResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IncludeClusterResources field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithIncludeClusterResources(value bool) *BackupSpecApplyConfiguration {
	b.IncludeClusterResources = &value
	return b
}

// WithHooks sets the Hooks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hooks field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithHooks(value *BackupHooksApplyConfiguration) *BackupSpecApplyConfiguration {
	b.Hooks = value
	return b
}

// WithStorageLocation sets the StorageLocation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageLocation field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithStorageLocation(value string) *BackupSpecApplyConfiguration {
	b.StorageLocation = &value
	return b
}

// WithVolumeSnapshotLocations adds the given value to the VolumeSnapshotLocations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeSnapshotLocations field.
func (b *BackupSpecApplyConfiguration) WithVolumeSnapshotLocations(values ...string) *BackupSpecApplyConfiguration {
	for i := range values {
		b.VolumeSnapshotLocations = append(b.VolumeSnapshotLocations, values[i])
	}
	return b
}

// WithDefaultVolumesToRestic sets the DefaultVolumesToRestic field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultVolumesToRestic field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithDefaultVolumesToRestic(value bool) *BackupSpecApplyConfiguration {
	b.DefaultVolumesToRestic = &value
	return b
}

// WithDefaultVolumesToFsBackup sets the DefaultVolumesToFsBackup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultVolumesToFsBackup field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithDefaultVolumesToFsBackup(value bool) *BackupSpecApplyConfiguration {
	b.DefaultVolumesToFsBackup = &value
	return b
}

// WithOrderedResources puts the entries into the OrderedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the OrderedResources field,
// overwriting an existing map entries in OrderedResources field with the same key.
func (b *BackupSpecApplyConfiguration) WithOrderedResources(entries map[string]string) *BackupSpecApplyConfiguration {
	if b.OrderedResources == nil && len(entries) > 0 {
		b.OrderedResources = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.OrderedResources[k] = v
	}
	return b
}

// WithCSISnapshotTimeout sets the CSISnapshotTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSISnapshotTimeout field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithCSISnapshotTimeout(value metav1.Duration) *BackupSpecApplyConfiguration {
	b.CSISnapshotTimeout = &value
	return b
}

// WithItemOperationTimeout sets the ItemOperationTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ItemOperationTimeout field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithItemOperationTimeout(value metav1.Duration) *BackupSpecApplyConfiguration {
	b.ItemOperationTimeout = &value
	return b
}

// WithResourcePolicy sets the ResourcePolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourcePolicy field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithResourcePolicy(value corev1.TypedLocalObjectReference) *BackupSpecApplyConfiguration {
	b.ResourcePolicy = &value
	return b
}

// WithSnapshotMoveData sets the SnapshotMoveData field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotMoveData field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithSnapshotMoveData(value bool) *BackupSpecApplyConfiguration {
	b.SnapshotMoveData = &value
	return b
}

// WithDataMover sets the DataMover field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataMover field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithDataMover(value string) *BackupSpecApplyConfiguration {
	b.DataMover = &value
	return b
}

// WithUploaderConfig sets the UploaderConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UploaderConfig field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithUploaderConfig(value *UploaderConfigForBackupApplyConfiguration) *BackupSpecApplyConfiguration {
	b.UploaderConfig = value
	return b
}
