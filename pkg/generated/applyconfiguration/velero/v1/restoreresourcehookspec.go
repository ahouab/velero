/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RestoreResourceHookSpecApplyConfiguration represents an declarative configuration of the RestoreResourceHookSpec type for use
// with apply.
type RestoreResourceHookSpecApplyConfiguration struct {
	Name               *string                                 `json:"name,omitempty"`
	IncludedNamespaces []string                                `json:"includedNamespaces,omitempty"`
	ExcludedNamespaces []string                                `json:"excludedNamespaces,omitempty"`
	IncludedResources  []string                                `json:"includedResources,omitempty"`
	ExcludedResources  []string                                `json:"excludedResources,omitempty"`
	LabelSelector      *v1.LabelSelector                       `json:"labelSelector,omitempty"`
	PostHooks          []RestoreResourceHookApplyConfiguration `json:"postHooks,omitempty"`
}

// RestoreResourceHookSpecApplyConfiguration constructs an declarative configuration of the RestoreResourceHookSpec type for use with
// apply.
func RestoreResourceHookSpec() *RestoreResourceHookSpecApplyConfiguration {
	return &RestoreResourceHookSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RestoreResourceHookSpecApplyConfiguration) WithName(value string) *RestoreResourceHookSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithIncludedNamespaces adds the given value to the IncludedNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedNamespaces field.
func (b *RestoreResourceHookSpecApplyConfiguration) WithIncludedNamespaces(values ...string) *RestoreResourceHookSpecApplyConfiguration {
	for i := range values {
		b.IncludedNamespaces = append(b.IncludedNamespaces, values[i])
	}
	return b
}

// WithExcludedNamespaces adds the given value to the ExcludedNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedNamespaces field.
func (b *RestoreResourceHookSpecApplyConfiguration) WithExcludedNamespaces(values ...string) *RestoreResourceHookSpecApplyConfiguration {
	for i := range values {
		b.ExcludedNamespaces = append(b.ExcludedNamespaces, values[i])
	}
	return b
}

// WithIncludedResources adds the given value to the IncludedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncludedResources field.
func (b *RestoreResourceHookSpecApplyConfiguration) WithIncludedResources(values ...string) *RestoreResourceHookSpecApplyConfiguration {
	for i := range values {
		b.IncludedResources = append(b.IncludedResources, values[i])
	}
	return b
}

// WithExcludedResources adds the given value to the ExcludedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedResources field.
func (b *RestoreResourceHookSpecApplyConfiguration) WithExcludedResources(values ...string) *RestoreResourceHookSpecApplyConfiguration {
	for i := range values {
		b.ExcludedResources = append(b.ExcludedResources, values[i])
	}
	return b
}

// WithLabelSelector sets the LabelSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelSelector field is set to the value of the last call.
func (b *RestoreResourceHookSpecApplyConfiguration) WithLabelSelector(value v1.LabelSelector) *RestoreResourceHookSpecApplyConfiguration {
	b.LabelSelector = &value
	return b
}

// WithPostHooks adds the given value to the PostHooks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PostHooks field.
func (b *RestoreResourceHookSpecApplyConfiguration) WithPostHooks(values ...*RestoreResourceHookApplyConfiguration) *RestoreResourceHookSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPostHooks")
		}
		b.PostHooks = append(b.PostHooks, *values[i])
	}
	return b
}
