/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// PodVolumeBackupSpecApplyConfiguration represents an declarative configuration of the PodVolumeBackupSpec type for use
// with apply.
type PodVolumeBackupSpecApplyConfiguration struct {
	Node                  *string             `json:"node,omitempty"`
	Pod                   *v1.ObjectReference `json:"pod,omitempty"`
	Volume                *string             `json:"volume,omitempty"`
	BackupStorageLocation *string             `json:"backupStorageLocation,omitempty"`
	RepoIdentifier        *string             `json:"repoIdentifier,omitempty"`
	UploaderType          *string             `json:"uploaderType,omitempty"`
	Tags                  map[string]string   `json:"tags,omitempty"`
	UploaderSettings      map[string]string   `json:"uploaderSettings,omitempty"`
}

// PodVolumeBackupSpecApplyConfiguration constructs an declarative configuration of the PodVolumeBackupSpec type for use with
// apply.
func PodVolumeBackupSpec() *PodVolumeBackupSpecApplyConfiguration {
	return &PodVolumeBackupSpecApplyConfiguration{}
}

// WithNode sets the Node field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Node field is set to the value of the last call.
func (b *PodVolumeBackupSpecApplyConfiguration) WithNode(value string) *PodVolumeBackupSpecApplyConfiguration {
	b.Node = &value
	return b
}

// WithPod sets the Pod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pod field is set to the value of the last call.
func (b *PodVolumeBackupSpecApplyConfiguration) WithPod(value v1.ObjectReference) *PodVolumeBackupSpecApplyConfiguration {
	b.Pod = &value
	return b
}

// WithVolume sets the Volume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Volume field is set to the value of the last call.
func (b *PodVolumeBackupSpecApplyConfiguration) WithVolume(value string) *PodVolumeBackupSpecApplyConfiguration {
	b.Volume = &value
	return b
}

// WithBackupStorageLocation sets the BackupStorageLocation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupStorageLocation field is set to the value of the last call.
func (b *PodVolumeBackupSpecApplyConfiguration) WithBackupStorageLocation(value string) *PodVolumeBackupSpecApplyConfiguration {
	b.BackupStorageLocation = &value
	return b
}

// WithRepoIdentifier sets the RepoIdentifier field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RepoIdentifier field is set to the value of the last call.
func (b *PodVolumeBackupSpecApplyConfiguration) WithRepoIdentifier(value string) *PodVolumeBackupSpecApplyConfiguration {
	b.RepoIdentifier = &value
	return b
}

// WithUploaderType sets the UploaderType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UploaderType field is set to the value of the last call.
func (b *PodVolumeBackupSpecApplyConfiguration) WithUploaderType(value string) *PodVolumeBackupSpecApplyConfiguration {
	b.UploaderType = &value
	return b
}

// WithTags puts the entries into the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Tags field,
// overwriting an existing map entries in Tags field with the same key.
func (b *PodVolumeBackupSpecApplyConfiguration) WithTags(entries map[string]string) *PodVolumeBackupSpecApplyConfiguration {
	if b.Tags == nil && len(entries) > 0 {
		b.Tags = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Tags[k] = v
	}
	return b
}

// WithUploaderSettings puts the entries into the UploaderSettings field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the UploaderSettings field,
// overwriting an existing map entries in UploaderSettings field with the same key.
func (b *PodVolumeBackupSpecApplyConfiguration) WithUploaderSettings(entries map[string]string) *PodVolumeBackupSpecApplyConfiguration {
	if b.UploaderSettings == nil && len(entries) > 0 {
		b.UploaderSettings = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.UploaderSettings[k] = v
	}
	return b
}
