/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DataDownloadSpecApplyConfiguration represents an declarative configuration of the DataDownloadSpec type for use
// with apply.
type DataDownloadSpecApplyConfiguration struct {
	TargetVolume          *TargetVolumeSpecApplyConfiguration `json:"targetVolume,omitempty"`
	BackupStorageLocation *string                             `json:"backupStorageLocation,omitempty"`
	DataMover             *string                             `json:"datamover,omitempty"`
	SnapshotID            *string                             `json:"snapshotID,omitempty"`
	SourceNamespace       *string                             `json:"sourceNamespace,omitempty"`
	DataMoverConfig       map[string]string                   `json:"dataMoverConfig,omitempty"`
	Cancel                *bool                               `json:"cancel,omitempty"`
	OperationTimeout      *v1.Duration                        `json:"operationTimeout,omitempty"`
}

// DataDownloadSpecApplyConfiguration constructs an declarative configuration of the DataDownloadSpec type for use with
// apply.
func DataDownloadSpec() *DataDownloadSpecApplyConfiguration {
	return &DataDownloadSpecApplyConfiguration{}
}

// WithTargetVolume sets the TargetVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetVolume field is set to the value of the last call.
func (b *DataDownloadSpecApplyConfiguration) WithTargetVolume(value *TargetVolumeSpecApplyConfiguration) *DataDownloadSpecApplyConfiguration {
	b.TargetVolume = value
	return b
}

// WithBackupStorageLocation sets the BackupStorageLocation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupStorageLocation field is set to the value of the last call.
func (b *DataDownloadSpecApplyConfiguration) WithBackupStorageLocation(value string) *DataDownloadSpecApplyConfiguration {
	b.BackupStorageLocation = &value
	return b
}

// WithDataMover sets the DataMover field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataMover field is set to the value of the last call.
func (b *DataDownloadSpecApplyConfiguration) WithDataMover(value string) *DataDownloadSpecApplyConfiguration {
	b.DataMover = &value
	return b
}

// WithSnapshotID sets the SnapshotID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotID field is set to the value of the last call.
func (b *DataDownloadSpecApplyConfiguration) WithSnapshotID(value string) *DataDownloadSpecApplyConfiguration {
	b.SnapshotID = &value
	return b
}

// WithSourceNamespace sets the SourceNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SourceNamespace field is set to the value of the last call.
func (b *DataDownloadSpecApplyConfiguration) WithSourceNamespace(value string) *DataDownloadSpecApplyConfiguration {
	b.SourceNamespace = &value
	return b
}

// WithDataMoverConfig puts the entries into the DataMoverConfig field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DataMoverConfig field,
// overwriting an existing map entries in DataMoverConfig field with the same key.
func (b *DataDownloadSpecApplyConfiguration) WithDataMoverConfig(entries map[string]string) *DataDownloadSpecApplyConfiguration {
	if b.DataMoverConfig == nil && len(entries) > 0 {
		b.DataMoverConfig = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.DataMoverConfig[k] = v
	}
	return b
}

// WithCancel sets the Cancel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cancel field is set to the value of the last call.
func (b *DataDownloadSpecApplyConfiguration) WithCancel(value bool) *DataDownloadSpecApplyConfiguration {
	b.Cancel = &value
	return b
}

// WithOperationTimeout sets the OperationTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OperationTimeout field is set to the value of the last call.
func (b *DataDownloadSpecApplyConfiguration) WithOperationTimeout(value v1.Duration) *DataDownloadSpecApplyConfiguration {
	b.OperationTimeout = &value
	return b
}
